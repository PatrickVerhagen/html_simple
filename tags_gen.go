// Code generated by htmlsimple generator; DO NOT EDIT.

package htmlsimple

// Tag methods for HTML elements

// A creates a <a> element and adds it to the current element.
func (e *Element) A() *Element {
	return e.Add(NormalTag("a"))
}

// Abbr creates a <abbr> element and adds it to the current element.
func (e *Element) Abbr() *Element {
	return e.Add(NormalTag("abbr"))
}

// Acronym creates a <acronym> element and adds it to the current element.
func (e *Element) Acronym() *Element {
	return e.Add(NormalTag("acronym"))
}

// Address creates a <address> element and adds it to the current element.
func (e *Element) Address() *Element {
	return e.Add(NormalTag("address"))
}

// Area creates a void <area> element and adds it to the current element.
func (e *Element) Area() *Element {
	return e.AddVoid(VoidTag("area"))
}

// Article creates a <article> element and adds it to the current element.
func (e *Element) Article() *Element {
	return e.Add(NormalTag("article"))
}

// Aside creates a <aside> element and adds it to the current element.
func (e *Element) Aside() *Element {
	return e.Add(NormalTag("aside"))
}

// Audio creates a <audio> element and adds it to the current element.
func (e *Element) Audio() *Element {
	return e.Add(NormalTag("audio"))
}

// B creates a <b> element and adds it to the current element.
func (e *Element) B() *Element {
	return e.Add(NormalTag("b"))
}

// Base creates a void <base> element and adds it to the current element.
func (e *Element) Base() *Element {
	return e.AddVoid(VoidTag("base"))
}

// Bdi creates a <bdi> element and adds it to the current element.
func (e *Element) Bdi() *Element {
	return e.Add(NormalTag("bdi"))
}

// Bdo creates a <bdo> element and adds it to the current element.
func (e *Element) Bdo() *Element {
	return e.Add(NormalTag("bdo"))
}

// Big creates a <big> element and adds it to the current element.
func (e *Element) Big() *Element {
	return e.Add(NormalTag("big"))
}

// Blockquote creates a <blockquote> element and adds it to the current element.
func (e *Element) Blockquote() *Element {
	return e.Add(NormalTag("blockquote"))
}

// Body creates a <body> element and adds it to the current element.
func (e *Element) Body() *Element {
	return e.Add(NormalTag("body"))
}

// Br creates a void <br> element and adds it to the current element.
func (e *Element) Br() *Element {
	return e.AddVoid(VoidTag("br"))
}

// Button creates a <button> element and adds it to the current element.
func (e *Element) Button() *Element {
	return e.Add(NormalTag("button"))
}

// Canvas creates a <canvas> element and adds it to the current element.
func (e *Element) Canvas() *Element {
	return e.Add(NormalTag("canvas"))
}

// Caption creates a <caption> element and adds it to the current element.
func (e *Element) Caption() *Element {
	return e.Add(NormalTag("caption"))
}

// Center creates a <center> element and adds it to the current element.
func (e *Element) Center() *Element {
	return e.Add(NormalTag("center"))
}

// Cite creates a <cite> element and adds it to the current element.
func (e *Element) Cite() *Element {
	return e.Add(NormalTag("cite"))
}

// Code creates a <code> element and adds it to the current element.
func (e *Element) Code() *Element {
	return e.Add(NormalTag("code"))
}

// Col creates a void <col> element and adds it to the current element.
func (e *Element) Col() *Element {
	return e.AddVoid(VoidTag("col"))
}

// Colgroup creates a <colgroup> element and adds it to the current element.
func (e *Element) Colgroup() *Element {
	return e.Add(NormalTag("colgroup"))
}

// Data creates a <data> element and adds it to the current element.
func (e *Element) Data() *Element {
	return e.Add(NormalTag("data"))
}

// Datalist creates a <datalist> element and adds it to the current element.
func (e *Element) Datalist() *Element {
	return e.Add(NormalTag("datalist"))
}

// Dd creates a <dd> element and adds it to the current element.
func (e *Element) Dd() *Element {
	return e.Add(NormalTag("dd"))
}

// Del creates a <del> element and adds it to the current element.
func (e *Element) Del() *Element {
	return e.Add(NormalTag("del"))
}

// Details creates a <details> element and adds it to the current element.
func (e *Element) Details() *Element {
	return e.Add(NormalTag("details"))
}

// Dfn creates a <dfn> element and adds it to the current element.
func (e *Element) Dfn() *Element {
	return e.Add(NormalTag("dfn"))
}

// Dialog creates a <dialog> element and adds it to the current element.
func (e *Element) Dialog() *Element {
	return e.Add(NormalTag("dialog"))
}

// Dir creates a <dir> element and adds it to the current element.
func (e *Element) Dir() *Element {
	return e.Add(NormalTag("dir"))
}

// Div creates a <div> element and adds it to the current element.
func (e *Element) Div() *Element {
	return e.Add(NormalTag("div"))
}

// Dl creates a <dl> element and adds it to the current element.
func (e *Element) Dl() *Element {
	return e.Add(NormalTag("dl"))
}

// Dt creates a <dt> element and adds it to the current element.
func (e *Element) Dt() *Element {
	return e.Add(NormalTag("dt"))
}

// Em creates a <em> element and adds it to the current element.
func (e *Element) Em() *Element {
	return e.Add(NormalTag("em"))
}

// Embed creates a void <embed> element and adds it to the current element.
func (e *Element) Embed() *Element {
	return e.AddVoid(VoidTag("embed"))
}

// Fencedframe creates a <fencedframe> element and adds it to the current element.
func (e *Element) Fencedframe() *Element {
	return e.Add(NormalTag("fencedframe"))
}

// Fieldset creates a <fieldset> element and adds it to the current element.
func (e *Element) Fieldset() *Element {
	return e.Add(NormalTag("fieldset"))
}

// Figcaption creates a <figcaption> element and adds it to the current element.
func (e *Element) Figcaption() *Element {
	return e.Add(NormalTag("figcaption"))
}

// Figure creates a <figure> element and adds it to the current element.
func (e *Element) Figure() *Element {
	return e.Add(NormalTag("figure"))
}

// Font creates a <font> element and adds it to the current element.
func (e *Element) Font() *Element {
	return e.Add(NormalTag("font"))
}

// Footer creates a <footer> element and adds it to the current element.
func (e *Element) Footer() *Element {
	return e.Add(NormalTag("footer"))
}

// Form creates a <form> element and adds it to the current element.
func (e *Element) Form() *Element {
	return e.Add(NormalTag("form"))
}

// Frame creates a <frame> element and adds it to the current element.
func (e *Element) Frame() *Element {
	return e.Add(NormalTag("frame"))
}

// Frameset creates a <frameset> element and adds it to the current element.
func (e *Element) Frameset() *Element {
	return e.Add(NormalTag("frameset"))
}

// H1 creates a <h1> element and adds it to the current element.
func (e *Element) H1() *Element {
	return e.Add(NormalTag("h1"))
}

// Head creates a <head> element and adds it to the current element.
func (e *Element) Head() *Element {
	return e.Add(NormalTag("head"))
}

// Header creates a <header> element and adds it to the current element.
func (e *Element) Header() *Element {
	return e.Add(NormalTag("header"))
}

// Hgroup creates a <hgroup> element and adds it to the current element.
func (e *Element) Hgroup() *Element {
	return e.Add(NormalTag("hgroup"))
}

// Hr creates a void <hr> element and adds it to the current element.
func (e *Element) Hr() *Element {
	return e.AddVoid(VoidTag("hr"))
}

// Html creates a <html> element and adds it to the current element.
func (e *Element) Html() *Element {
	return e.Add(NormalTag("html"))
}

// I creates a <i> element and adds it to the current element.
func (e *Element) I() *Element {
	return e.Add(NormalTag("i"))
}

// Iframe creates a <iframe> element and adds it to the current element.
func (e *Element) Iframe() *Element {
	return e.Add(NormalTag("iframe"))
}

// Img creates a void <img> element and adds it to the current element.
func (e *Element) Img() *Element {
	return e.AddVoid(VoidTag("img"))
}

// Input creates a void <input> element and adds it to the current element.
func (e *Element) Input() *Element {
	return e.AddVoid(VoidTag("input"))
}

// Ins creates a <ins> element and adds it to the current element.
func (e *Element) Ins() *Element {
	return e.Add(NormalTag("ins"))
}

// Kbd creates a <kbd> element and adds it to the current element.
func (e *Element) Kbd() *Element {
	return e.Add(NormalTag("kbd"))
}

// Label creates a <label> element and adds it to the current element.
func (e *Element) Label() *Element {
	return e.Add(NormalTag("label"))
}

// Legend creates a <legend> element and adds it to the current element.
func (e *Element) Legend() *Element {
	return e.Add(NormalTag("legend"))
}

// Li creates a <li> element and adds it to the current element.
func (e *Element) Li() *Element {
	return e.Add(NormalTag("li"))
}

// Link creates a void <link> element and adds it to the current element.
func (e *Element) Link() *Element {
	return e.AddVoid(VoidTag("link"))
}

// Main creates a <main> element and adds it to the current element.
func (e *Element) Main() *Element {
	return e.Add(NormalTag("main"))
}

// Map creates a <map> element and adds it to the current element.
func (e *Element) Map() *Element {
	return e.Add(NormalTag("map"))
}

// Mark creates a <mark> element and adds it to the current element.
func (e *Element) Mark() *Element {
	return e.Add(NormalTag("mark"))
}

// Marquee creates a <marquee> element and adds it to the current element.
func (e *Element) Marquee() *Element {
	return e.Add(NormalTag("marquee"))
}

// Math creates a <math> element and adds it to the current element.
func (e *Element) Math() *Element {
	return e.Add(NormalTag("math"))
}

// Menu creates a <menu> element and adds it to the current element.
func (e *Element) Menu() *Element {
	return e.Add(NormalTag("menu"))
}

// Meta creates a void <meta> element and adds it to the current element.
func (e *Element) Meta() *Element {
	return e.AddVoid(VoidTag("meta"))
}

// Meter creates a <meter> element and adds it to the current element.
func (e *Element) Meter() *Element {
	return e.Add(NormalTag("meter"))
}

// Nav creates a <nav> element and adds it to the current element.
func (e *Element) Nav() *Element {
	return e.Add(NormalTag("nav"))
}

// Nobr creates a <nobr> element and adds it to the current element.
func (e *Element) Nobr() *Element {
	return e.Add(NormalTag("nobr"))
}

// Noembed creates a <noembed> element and adds it to the current element.
func (e *Element) Noembed() *Element {
	return e.Add(NormalTag("noembed"))
}

// Noframes creates a <noframes> element and adds it to the current element.
func (e *Element) Noframes() *Element {
	return e.Add(NormalTag("noframes"))
}

// Noscript creates a <noscript> element and adds it to the current element.
func (e *Element) Noscript() *Element {
	return e.Add(NormalTag("noscript"))
}

// Object creates a <object> element and adds it to the current element.
func (e *Element) Object() *Element {
	return e.Add(NormalTag("object"))
}

// Ol creates a <ol> element and adds it to the current element.
func (e *Element) Ol() *Element {
	return e.Add(NormalTag("ol"))
}

// Optgroup creates a <optgroup> element and adds it to the current element.
func (e *Element) Optgroup() *Element {
	return e.Add(NormalTag("optgroup"))
}

// Option creates a <option> element and adds it to the current element.
func (e *Element) Option() *Element {
	return e.Add(NormalTag("option"))
}

// Output creates a <output> element and adds it to the current element.
func (e *Element) Output() *Element {
	return e.Add(NormalTag("output"))
}

// P creates a <p> element and adds it to the current element.
func (e *Element) P() *Element {
	return e.Add(NormalTag("p"))
}

// Param creates a void <param> element and adds it to the current element.
func (e *Element) Param() *Element {
	return e.AddVoid(VoidTag("param"))
}

// Picture creates a <picture> element and adds it to the current element.
func (e *Element) Picture() *Element {
	return e.Add(NormalTag("picture"))
}

// Plaintext creates a <plaintext> element and adds it to the current element.
func (e *Element) Plaintext() *Element {
	return e.Add(NormalTag("plaintext"))
}

// Portal creates a <portal> element and adds it to the current element.
func (e *Element) Portal() *Element {
	return e.Add(NormalTag("portal"))
}

// Pre creates a <pre> element and adds it to the current element.
func (e *Element) Pre() *Element {
	return e.Add(NormalTag("pre"))
}

// Progress creates a <progress> element and adds it to the current element.
func (e *Element) Progress() *Element {
	return e.Add(NormalTag("progress"))
}

// Q creates a <q> element and adds it to the current element.
func (e *Element) Q() *Element {
	return e.Add(NormalTag("q"))
}

// Rb creates a <rb> element and adds it to the current element.
func (e *Element) Rb() *Element {
	return e.Add(NormalTag("rb"))
}

// Rp creates a <rp> element and adds it to the current element.
func (e *Element) Rp() *Element {
	return e.Add(NormalTag("rp"))
}

// Rt creates a <rt> element and adds it to the current element.
func (e *Element) Rt() *Element {
	return e.Add(NormalTag("rt"))
}

// Rtc creates a <rtc> element and adds it to the current element.
func (e *Element) Rtc() *Element {
	return e.Add(NormalTag("rtc"))
}

// Ruby creates a <ruby> element and adds it to the current element.
func (e *Element) Ruby() *Element {
	return e.Add(NormalTag("ruby"))
}

// S creates a <s> element and adds it to the current element.
func (e *Element) S() *Element {
	return e.Add(NormalTag("s"))
}

// Samp creates a <samp> element and adds it to the current element.
func (e *Element) Samp() *Element {
	return e.Add(NormalTag("samp"))
}

// Script creates a <script> element and adds it to the current element.
func (e *Element) Script() *Element {
	return e.Add(NormalTag("script"))
}

// Search creates a <search> element and adds it to the current element.
func (e *Element) Search() *Element {
	return e.Add(NormalTag("search"))
}

// Section creates a <section> element and adds it to the current element.
func (e *Element) Section() *Element {
	return e.Add(NormalTag("section"))
}

// Select creates a <select> element and adds it to the current element.
func (e *Element) Select() *Element {
	return e.Add(NormalTag("select"))
}

// Slot creates a <slot> element and adds it to the current element.
func (e *Element) Slot() *Element {
	return e.Add(NormalTag("slot"))
}

// Small creates a <small> element and adds it to the current element.
func (e *Element) Small() *Element {
	return e.Add(NormalTag("small"))
}

// Source creates a void <source> element and adds it to the current element.
func (e *Element) Source() *Element {
	return e.AddVoid(VoidTag("source"))
}

// Span creates a <span> element and adds it to the current element.
func (e *Element) Span() *Element {
	return e.Add(NormalTag("span"))
}

// Strike creates a <strike> element and adds it to the current element.
func (e *Element) Strike() *Element {
	return e.Add(NormalTag("strike"))
}

// Strong creates a <strong> element and adds it to the current element.
func (e *Element) Strong() *Element {
	return e.Add(NormalTag("strong"))
}

// Style creates a <style> element and adds it to the current element.
func (e *Element) Style() *Element {
	return e.Add(NormalTag("style"))
}

// Sub creates a <sub> element and adds it to the current element.
func (e *Element) Sub() *Element {
	return e.Add(NormalTag("sub"))
}

// Summary creates a <summary> element and adds it to the current element.
func (e *Element) Summary() *Element {
	return e.Add(NormalTag("summary"))
}

// Sup creates a <sup> element and adds it to the current element.
func (e *Element) Sup() *Element {
	return e.Add(NormalTag("sup"))
}

// Svg creates a <svg> element and adds it to the current element.
func (e *Element) Svg() *Element {
	return e.Add(NormalTag("svg"))
}

// Table creates a <table> element and adds it to the current element.
func (e *Element) Table() *Element {
	return e.Add(NormalTag("table"))
}

// Tbody creates a <tbody> element and adds it to the current element.
func (e *Element) Tbody() *Element {
	return e.Add(NormalTag("tbody"))
}

// Td creates a <td> element and adds it to the current element.
func (e *Element) Td() *Element {
	return e.Add(NormalTag("td"))
}

// Template creates a <template> element and adds it to the current element.
func (e *Element) Template() *Element {
	return e.Add(NormalTag("template"))
}

// Textarea creates a <textarea> element and adds it to the current element.
func (e *Element) Textarea() *Element {
	return e.Add(NormalTag("textarea"))
}

// Tfoot creates a <tfoot> element and adds it to the current element.
func (e *Element) Tfoot() *Element {
	return e.Add(NormalTag("tfoot"))
}

// Th creates a <th> element and adds it to the current element.
func (e *Element) Th() *Element {
	return e.Add(NormalTag("th"))
}

// Thead creates a <thead> element and adds it to the current element.
func (e *Element) Thead() *Element {
	return e.Add(NormalTag("thead"))
}

// Time creates a <time> element and adds it to the current element.
func (e *Element) Time() *Element {
	return e.Add(NormalTag("time"))
}

// Title creates a <title> element and adds it to the current element.
func (e *Element) Title() *Element {
	return e.Add(NormalTag("title"))
}

// Tr creates a <tr> element and adds it to the current element.
func (e *Element) Tr() *Element {
	return e.Add(NormalTag("tr"))
}

// Track creates a void <track> element and adds it to the current element.
func (e *Element) Track() *Element {
	return e.AddVoid(VoidTag("track"))
}

// Tt creates a <tt> element and adds it to the current element.
func (e *Element) Tt() *Element {
	return e.Add(NormalTag("tt"))
}

// U creates a <u> element and adds it to the current element.
func (e *Element) U() *Element {
	return e.Add(NormalTag("u"))
}

// Ul creates a <ul> element and adds it to the current element.
func (e *Element) Ul() *Element {
	return e.Add(NormalTag("ul"))
}

// Var creates a <var> element and adds it to the current element.
func (e *Element) Var() *Element {
	return e.Add(NormalTag("var"))
}

// Video creates a <video> element and adds it to the current element.
func (e *Element) Video() *Element {
	return e.Add(NormalTag("video"))
}

// Wbr creates a void <wbr> element and adds it to the current element.
func (e *Element) Wbr() *Element {
	return e.AddVoid(VoidTag("wbr"))
}

// Xmp creates a <xmp> element and adds it to the current element.
func (e *Element) Xmp() *Element {
	return e.Add(NormalTag("xmp"))
}
